Line 1: type_specifier : INT

int

Line 1: declaration_list : ID

i

Line 1: declaration_list : declaration_list COMMA ID

i,j

Line 1: declaration_list : declaration_list COMMA ID

i,j,k

Line 1: declaration_list : declaration_list COMMA ID

i,j,k,l

Line 1: declaration_list : declaration_list COMMA ID

i,j,k,l,m

Line 1: declaration_list : declaration_list COMMA ID

i,j,k,l,m,n

Line 1: declaration_list : declaration_list COMMA ID

i,j,k,l,m,n,o

Line 1: declaration_list : declaration_list COMMA ID

i,j,k,l,m,n,o,p

Line 1: var_declaration : type_specifier declaration_list SEMICOLON

int i,j,k,l,m,n,o,p;

Line 1: unit : var_declaration

int i,j,k,l,m,n,o,p;

Line 1: program : unit

int i,j,k,l,m,n,o,p;

Line 2: type_specifier : INT

int

Line 6: variable : ID

i

Line 6: factor : CONST_INT

1

Line 6: unary_expression : factor

1

Line 6: term : unary_expression

1

Line 6: simple_expression : term

1

Line 6: rel_expression : simple_expression

1

Line 6: logic_expression : rel_expression

1

Line 6: expression : variable ASSIGNOP logic_expression

i=1

Line 6: expression_statement : expression SEMICOLON

i=1;

Line 6: statement : expression_statement

i=1;

Line 6: statements : statement

i=1;

Line 7: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(i);

Line 7: statements : statements statement

i=1;
printf(i);

Line 8: variable : ID

j

Line 8: factor : CONST_INT

5

Line 8: unary_expression : factor

5

Line 8: term : unary_expression

5

Line 8: simple_expression : term

5

Line 8: factor : CONST_INT

8

Line 8: unary_expression : factor

8

Line 8: term : unary_expression

8

Line 8: simple_expression : simple_expression ADDOP term

5+8

Line 8: rel_expression : simple_expression

5+8

Line 8: logic_expression : rel_expression

5+8

Line 8: expression : variable ASSIGNOP logic_expression

j=5+8

Line 8: expression_statement : expression SEMICOLON

j=5+8;

Line 8: statement : expression_statement

j=5+8;

Line 8: statements : statements statement

i=1;
printf(i);
j=5+8;

Line 9: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(j);

Line 9: statements : statements statement

i=1;
printf(i);
j=5+8;
printf(j);

Line 10: variable : ID

k

Line 10: variable : ID

i

Line 10: factor : variable

i

Line 10: unary_expression : factor

i

Line 10: term : unary_expression

i

Line 10: simple_expression : term

i

Line 10: factor : CONST_INT

2

Line 10: unary_expression : factor

2

Line 10: term : unary_expression

2

Line 10: variable : ID

j

Line 10: factor : variable

j

Line 10: unary_expression : factor

j

Line 10: term : term MULOP unary_expression

2*j

Line 10: simple_expression : simple_expression ADDOP term

i+2*j

Line 10: rel_expression : simple_expression

i+2*j

Line 10: logic_expression : rel_expression

i+2*j

Line 10: expression : variable ASSIGNOP logic_expression

k=i+2*j

Line 10: expression_statement : expression SEMICOLON

k=i+2*j;

Line 10: statement : expression_statement

k=i+2*j;

Line 10: statements : statements statement

i=1;
printf(i);
j=5+8;
printf(j);
k=i+2*j;

Line 11: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(k);

Line 11: statements : statements statement

i=1;
printf(i);
j=5+8;
printf(j);
k=i+2*j;
printf(k);

Line 12: variable : ID

l

Line 12: variable : ID

k

Line 12: factor : variable

k

Line 12: unary_expression : factor

k

Line 12: term : unary_expression

k

Line 12: factor : CONST_INT

3

Line 12: unary_expression : factor

3

Line 12: term : term MULOP unary_expression

k/3

Line 12: simple_expression : term

k/3

Line 12: rel_expression : simple_expression

k/3

Line 12: logic_expression : rel_expression

k/3

Line 12: expression : variable ASSIGNOP logic_expression

l=k/3

Line 12: expression_statement : expression SEMICOLON

l=k/3;

Line 12: statement : expression_statement

l=k/3;

Line 12: statements : statements statement

i=1;
printf(i);
j=5+8;
printf(j);
k=i+2*j;
printf(k);
l=k/3;

Line 13: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(l);

Line 13: statements : statements statement

i=1;
printf(i);
j=5+8;
printf(j);
k=i+2*j;
printf(k);
l=k/3;
printf(l);

Line 14: variable : ID

m

Line 14: variable : ID

k

Line 14: factor : variable

k

Line 14: unary_expression : factor

k

Line 14: term : unary_expression

k

Line 14: factor : CONST_INT

9

Line 14: unary_expression : factor

9

Line 14: term : term MULOP unary_expression

k%9

Line 14: simple_expression : term

k%9

Line 14: rel_expression : simple_expression

k%9

Line 14: logic_expression : rel_expression

k%9

Line 14: expression : variable ASSIGNOP logic_expression

m=k%9

Line 14: expression_statement : expression SEMICOLON

m=k%9;

Line 14: statement : expression_statement

m=k%9;

Line 14: statements : statements statement

i=1;
printf(i);
j=5+8;
printf(j);
k=i+2*j;
printf(k);
l=k/3;
printf(l);
m=k%9;

Line 15: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(m);

Line 15: statements : statements statement

i=1;
printf(i);
j=5+8;
printf(j);
k=i+2*j;
printf(k);
l=k/3;
printf(l);
m=k%9;
printf(m);

Line 17: variable : ID

n

Line 17: variable : ID

m

Line 17: factor : variable

m

Line 17: unary_expression : factor

m

Line 17: term : unary_expression

m

Line 17: simple_expression : term

m

Line 17: variable : ID

l

Line 17: factor : variable

l

Line 17: unary_expression : factor

l

Line 17: term : unary_expression

l

Line 17: simple_expression : term

l

Line 17: rel_expression : simple_expression RELOP simple_expression

m<=l

Line 17: logic_expression : rel_expression

m<=l

Line 17: expression : variable ASSIGNOP logic_expression

n=m<=l

Line 17: expression_statement : expression SEMICOLON

n=m<=l;

Line 17: statement : expression_statement

n=m<=l;

Line 17: statements : statements statement

i=1;
printf(i);
j=5+8;
printf(j);
k=i+2*j;
printf(k);
l=k/3;
printf(l);
m=k%9;
printf(m);
n=m<=l;

Line 18: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(n);

Line 18: statements : statements statement

i=1;
printf(i);
j=5+8;
printf(j);
k=i+2*j;
printf(k);
l=k/3;
printf(l);
m=k%9;
printf(m);
n=m<=l;
printf(n);

Line 20: variable : ID

o

Line 20: variable : ID

i

Line 20: factor : variable

i

Line 20: unary_expression : factor

i

Line 20: term : unary_expression

i

Line 20: simple_expression : term

i

Line 20: variable : ID

j

Line 20: factor : variable

j

Line 20: unary_expression : factor

j

Line 20: term : unary_expression

j

Line 20: simple_expression : term

j

Line 20: rel_expression : simple_expression RELOP simple_expression

i!=j

Line 20: logic_expression : rel_expression

i!=j

Line 20: expression : variable ASSIGNOP logic_expression

o=i!=j

Line 20: expression_statement : expression SEMICOLON

o=i!=j;

Line 20: statement : expression_statement

o=i!=j;

Line 20: statements : statements statement

i=1;
printf(i);
j=5+8;
printf(j);
k=i+2*j;
printf(k);
l=k/3;
printf(l);
m=k%9;
printf(m);
n=m<=l;
printf(n);
o=i!=j;

Line 21: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(o);

Line 21: statements : statements statement

i=1;
printf(i);
j=5+8;
printf(j);
k=i+2*j;
printf(k);
l=k/3;
printf(l);
m=k%9;
printf(m);
n=m<=l;
printf(n);
o=i!=j;
printf(o);

Line 23: variable : ID

p

Line 23: variable : ID

n

Line 23: factor : variable

n

Line 23: unary_expression : factor

n

Line 23: term : unary_expression

n

Line 23: simple_expression : term

n

Line 23: rel_expression : simple_expression

n

Line 23: variable : ID

o

Line 23: factor : variable

o

Line 23: unary_expression : factor

o

Line 23: term : unary_expression

o

Line 23: simple_expression : term

o

Line 23: rel_expression : simple_expression

o

Line 23: logic_expression : rel_expression LOGICOP rel_expression

n||o

Line 23: expression : variable ASSIGNOP logic_expression

p=n||o

Line 23: expression_statement : expression SEMICOLON

p=n||o;

Line 23: statement : expression_statement

p=n||o;

Line 23: statements : statements statement

i=1;
printf(i);
j=5+8;
printf(j);
k=i+2*j;
printf(k);
l=k/3;
printf(l);
m=k%9;
printf(m);
n=m<=l;
printf(n);
o=i!=j;
printf(o);
p=n||o;

Line 24: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(p);

Line 24: statements : statements statement

i=1;
printf(i);
j=5+8;
printf(j);
k=i+2*j;
printf(k);
l=k/3;
printf(l);
m=k%9;
printf(m);
n=m<=l;
printf(n);
o=i!=j;
printf(o);
p=n||o;
printf(p);

Line 26: variable : ID

p

Line 26: variable : ID

n

Line 26: factor : variable

n

Line 26: unary_expression : factor

n

Line 26: term : unary_expression

n

Line 26: simple_expression : term

n

Line 26: rel_expression : simple_expression

n

Line 26: variable : ID

o

Line 26: factor : variable

o

Line 26: unary_expression : factor

o

Line 26: term : unary_expression

o

Line 26: simple_expression : term

o

Line 26: rel_expression : simple_expression

o

Line 26: logic_expression : rel_expression LOGICOP rel_expression

n&&o

Line 26: expression : variable ASSIGNOP logic_expression

p=n&&o

Line 26: expression_statement : expression SEMICOLON

p=n&&o;

Line 26: statement : expression_statement

p=n&&o;

Line 26: statements : statements statement

i=1;
printf(i);
j=5+8;
printf(j);
k=i+2*j;
printf(k);
l=k/3;
printf(l);
m=k%9;
printf(m);
n=m<=l;
printf(n);
o=i!=j;
printf(o);
p=n||o;
printf(p);
p=n&&o;

Line 27: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(p);

Line 27: statements : statements statement

i=1;
printf(i);
j=5+8;
printf(j);
k=i+2*j;
printf(k);
l=k/3;
printf(l);
m=k%9;
printf(m);
n=m<=l;
printf(n);
o=i!=j;
printf(o);
p=n||o;
printf(p);
p=n&&o;
printf(p);

Line 29: variable : ID

p

Line 29: factor : variable INCOP

p++

Line 29: unary_expression : factor

p++

Line 29: term : unary_expression

p++

Line 29: simple_expression : term

p++

Line 29: rel_expression : simple_expression

p++

Line 29: logic_expression : rel_expression

p++

Line 29: expression : logic_expression

p++

Line 29: expression_statement : expression SEMICOLON

p++;

Line 29: statement : expression_statement

p++;

Line 29: statements : statements statement

i=1;
printf(i);
j=5+8;
printf(j);
k=i+2*j;
printf(k);
l=k/3;
printf(l);
m=k%9;
printf(m);
n=m<=l;
printf(n);
o=i!=j;
printf(o);
p=n||o;
printf(p);
p=n&&o;
printf(p);
p++;

Line 30: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(p);

Line 30: statements : statements statement

i=1;
printf(i);
j=5+8;
printf(j);
k=i+2*j;
printf(k);
l=k/3;
printf(l);
m=k%9;
printf(m);
n=m<=l;
printf(n);
o=i!=j;
printf(o);
p=n||o;
printf(p);
p=n&&o;
printf(p);
p++;
printf(p);

Line 32: variable : ID

k

Line 32: variable : ID

p

Line 32: factor : variable

p

Line 32: unary_expression : factor

p

Line 32: unary_expression : ADDOP unary_expression

-p

Line 32: term : unary_expression

-p

Line 32: simple_expression : term

-p

Line 32: rel_expression : simple_expression

-p

Line 32: logic_expression : rel_expression

-p

Line 32: expression : variable ASSIGNOP logic_expression

k=-p

Line 32: expression_statement : expression SEMICOLON

k=-p;

Line 32: statement : expression_statement

k=-p;

Line 32: statements : statements statement

i=1;
printf(i);
j=5+8;
printf(j);
k=i+2*j;
printf(k);
l=k/3;
printf(l);
m=k%9;
printf(m);
n=m<=l;
printf(n);
o=i!=j;
printf(o);
p=n||o;
printf(p);
p=n&&o;
printf(p);
p++;
printf(p);
k=-p;

Line 33: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(k);

Line 33: statements : statements statement

i=1;
printf(i);
j=5+8;
printf(j);
k=i+2*j;
printf(k);
l=k/3;
printf(l);
m=k%9;
printf(m);
n=m<=l;
printf(n);
o=i!=j;
printf(o);
p=n||o;
printf(p);
p=n&&o;
printf(p);
p++;
printf(p);
k=-p;
printf(k);

Line 38: factor : CONST_INT

0

Line 38: unary_expression : factor

0

Line 38: term : unary_expression

0

Line 38: simple_expression : term

0

Line 38: rel_expression : simple_expression

0

Line 38: logic_expression : rel_expression

0

Line 38: expression : logic_expression

0

Line 38: statement : RETURN expression SEMICOLON

return 0;

Line 38: statements : statements statement

i=1;
printf(i);
j=5+8;
printf(j);
k=i+2*j;
printf(k);
l=k/3;
printf(l);
m=k%9;
printf(m);
n=m<=l;
printf(n);
o=i!=j;
printf(o);
p=n||o;
printf(p);
p=n&&o;
printf(p);
p++;
printf(p);
k=-p;
printf(k);
return 0;

Line 39: compound_statement : LCURL statements RCURL

{
i=1;
printf(i);
j=5+8;
printf(j);
k=i+2*j;
printf(k);
l=k/3;
printf(l);
m=k%9;
printf(m);
n=m<=l;
printf(n);
o=i!=j;
printf(o);
p=n||o;
printf(p);
p=n&&o;
printf(p);
p++;
printf(p);
k=-p;
printf(k);
return 0;
}

ScopeTable # 1.1

ScopeTable # 1
1 --> < main , ID > 
15 --> < i , ID > 
16 --> < j , ID > 
17 --> < k , ID > 
18 --> < l , ID > 
19 --> < m , ID > 
20 --> < n , ID > 
21 --> < o , ID > 
22 --> < p , ID > 

Line 39: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
i=1;
printf(i);
j=5+8;
printf(j);
k=i+2*j;
printf(k);
l=k/3;
printf(l);
m=k%9;
printf(m);
n=m<=l;
printf(n);
o=i!=j;
printf(o);
p=n||o;
printf(p);
p=n&&o;
printf(p);
p++;
printf(p);
k=-p;
printf(k);
return 0;
}

Line 39: unit : func_definition

int main(){
i=1;
printf(i);
j=5+8;
printf(j);
k=i+2*j;
printf(k);
l=k/3;
printf(l);
m=k%9;
printf(m);
n=m<=l;
printf(n);
o=i!=j;
printf(o);
p=n||o;
printf(p);
p=n&&o;
printf(p);
p++;
printf(p);
k=-p;
printf(k);
return 0;
}

Line 39: program : program unit

int i,j,k,l,m,n,o,p;
int main(){
i=1;
printf(i);
j=5+8;
printf(j);
k=i+2*j;
printf(k);
l=k/3;
printf(l);
m=k%9;
printf(m);
n=m<=l;
printf(n);
o=i!=j;
printf(o);
p=n||o;
printf(p);
p=n&&o;
printf(p);
p++;
printf(p);
k=-p;
printf(k);
return 0;
}

Line 41: start : program

ScopeTable # 1
1 --> < main , ID > 
15 --> < i , ID > 
16 --> < j , ID > 
17 --> < k , ID > 
18 --> < l , ID > 
19 --> < m , ID > 
20 --> < n , ID > 
21 --> < o , ID > 
22 --> < p , ID > 

Total lines: 41
Total errors: 0
